//
//  MessagesViewController.swift
//  CanOfMessages_Extension
//
//  Created by boland on 1/24/17.
//  Copyright Â© 2017 mallocmedia. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var tableView: UITableView?
    var cans = ["Yo Daddy-0", "Bigups!", "Sup Dawg"]
    var savedConversation: MSConversation?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        super.willBecomeActive(with: conversation)
        if let convo = activeConversation {
            savedConversation = convo
        }
    
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

    //NOTE: Don't think I need this stuff right now
//    func presentVC(for conversation: MSConversation, with presentationStyle: MSMessagesAppPresentationStyle) {
//        let controller: UIViewController
//        
//        if presentationStyle == .compact {
//            controller = compactVC
//        } else {
//            controller = expandedVC
//        }
//        addChildViewController(controller)
//    }
    
//    var compactVC : UIViewController {
//        guard let compactVC = storyboard?.instantiateViewController(withIdentifier: "CompactVC") as? CompactViewController else {
//            fatalError("Could not make Comact VC")
//        }
//        return compactVC
//    }
//    
//    var expandedVC: UIViewController {
//        guard let expandedVC = storyboard?.instantiateViewController(withIdentifier: "ExpandedVC") as? ExpandedViewController else {
//            fatalError("Coulf not make Expanded VC")
//        }
//        return expandedVC
//    }

}

extension MessagesViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        //TEMP for now just create a few, but will need to pull these from somewhere
        return cans.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let tvc = tableView.dequeueReusableCell(withIdentifier: "CannedMessageTableViewCell")
        let cannedResponse = cans[indexPath.row]
        tvc?.textLabel?.text = cannedResponse
        return tvc!
    }
    
 //   func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
//        let cannedResponse = cans[indexPath.row]
//        let message = MSMessage()
//        let layout = MSMessageTemplateLayout()
//        layout.caption = cannedResponse
//        message.layout = layout
//        guard let convo = activeConversation else { return nil }
//        convo.insert(message) { (error) in
//            print("this was added")
//        }
//        return indexPath

 //   }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let cannedResponse = cans[indexPath.row]
        let message = MSMessage()
        let layout = MSMessageTemplateLayout()
        layout.caption = cannedResponse
        message.layout = layout
        guard let convo = activeConversation else { return }
        convo.insert(message) { (error) in
            print("this was added")
        }
    }

}
