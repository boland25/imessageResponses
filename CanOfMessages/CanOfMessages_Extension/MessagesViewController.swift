//
//  MessagesViewController.swift
//  CanOfMessages_Extension
//
//  Created by boland on 1/24/17.
//  Copyright Â© 2017 mallocmedia. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var tableView: UITableView?
    var cans = Cans()
    var fiftysCans = ["A Gas", "Hey Big Daddy", "Are you copping a bit", "square", "cube", "cats", "Yo Daddy-o", "dig it man, that's crazy!", "Out to get your kicks?"]
    var savedConversation: MSConversation?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        super.willBecomeActive(with: conversation)
        if let convo = activeConversation {
            savedConversation = convo
        }
    
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}

extension MessagesViewController: UITableViewDelegate, UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let can = Can(rawValue: section) else { return 1 }
        switch can {
        case .fiftys:
            return cans.fiftysCans.count
        case .sixtys:
            return cans.sixtysCans.count
        case .milenials:
            return cans.milenialCans.count
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return cans.total
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let tvc = tableView.dequeueReusableCell(withIdentifier: "CannedMessageTableViewCell")
        guard let canArray = cans.current(index: indexPath.section) else { return UITableViewCell() }
        let cannedResponse = canArray[indexPath.row]
        tvc?.textLabel?.text = cannedResponse
        return tvc!
    }
    
 //   func tableView(_ tableView: UITableView, willSelectRowAt indexPath: IndexPath) -> IndexPath? {
//        let cannedResponse = cans[indexPath.row]
//        let message = MSMessage()
//        let layout = MSMessageTemplateLayout()
//        layout.caption = cannedResponse
//        message.layout = layout
//        guard let convo = activeConversation else { return nil }
//        convo.insert(message) { (error) in
//            print("this was added")
//        }
//        return indexPath

 //   }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        guard let canArray = cans.current(index: indexPath.section) else { return }
        let cannedResponse = canArray[indexPath.row]
        let message = MSMessage()
        message.layout = createMessageLayout(caption: cannedResponse)
        guard let convo = activeConversation else { return }
        convo.insert(message) { (error) in
            print("this was added")
        }
    }
    
    func createMessageLayout(caption: String) -> MSMessageTemplateLayout {
        let layout = MSMessageTemplateLayout()
        layout.caption = caption
        layout.image = nil
        layout.subcaption = nil
        return layout
    }

}
